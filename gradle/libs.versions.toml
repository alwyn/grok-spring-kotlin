[versions]
apache-commons-codec = "1.18.0"
asciidoctor = "4.0.4"
assertj = "3.27.3"
context-propagation = "1.1.3"
detekt = "1.23.8"
gson = "2.13.1"
jacoco = "0.8.13"
junit = "5.13.0"
kotlin = "2.1.21"
kotlin-logging = "7.0.7"
kotlinx-coroutines = "1.10.2"
kotlinx-serialization-json = "1.8.1"
kover = "0.9.1"
ktor-plugin = "3.1.3"
logback = "1.5.18"
logstash-logback-encoder = "8.1"
micrometer = "1.15.0"
micrometer-tracing-bridge-otel = "1.5.0"
mindscapehq = "4.1.1"
mockk = "1.14.2"
# This version must match the transitive dependency version of opentelemtry-api that comes from micrometer-tracing-bridge-otel
opentelemetry-exporter-otlp = "1.43.0"
r2dbc-proxy = "1.1.6.RELEASE"
slf4j = "2.0.17"
sonarqube = "6.2.0.5505"
spring-boot = "3.5.0"
spring-cloud = "2025.0.0"
spring-dependency-management = "1.1.7"
spring-reactor = "2024.0.6"
springmockk = "4.0.2"
systemstubs = "2.1.8"
testLogger = "4.0.0"

[libraries]
apache-commons-codec = { module = "commons-codec:commons-codec", version.ref = "apache-commons-codec" }
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" }

gson = { module = "com.google.code.gson:gson", version.ref = "gson" }

jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }
jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml" }
janino = { module = "org.codehaus.janino:janino" }
junit-bom = { module = "org.junit:junit-bom", version.ref = "junit" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }

kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization-json" }
kotlin-logging = { module = "io.github.oshai:kotlin-logging-jvm", version.ref = "kotlin-logging" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin" }

logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-logback-encoder" }

micrometer-context-propagation = { module = "io.micrometer:context-propagation", version.ref = "context-propagation" }
micrometer-datadog = { module = "io.micrometer:micrometer-registry-datadog", version.ref = "micrometer" }
micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
micrometer-tracing-bridge-otel = { module = "io.micrometer:micrometer-tracing-bridge-otel", version.ref = "micrometer-tracing-bridge-otel" }
mindscapehq = { module = "com.mindscapehq:core", version.ref = "mindscapehq" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }

opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp", version.ref = "opentelemetry-exporter-otlp" }

postgresql = { module = "org.postgresql:postgresql" }

r2dbc-postgresql = { module = "org.postgresql:r2dbc-postgresql" }
r2dbc-proxy = { module = "io.r2dbc:r2dbc-proxy", version.ref = "r2dbc-proxy" }

reactor-kotlin = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions" }
reactor-test = { module = "io.projectreactor:reactor-test" }

slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor" }
spring-boot-starter-data-r2dbc = { module = "org.springframework.boot:spring-boot-starter-data-r2dbc" }
spring-boot-devtools = { module = "org.springframework.boot:spring-boot-devtools" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-integration = { module = "org.springframework.boot:spring-boot-starter-integration" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-testcontainers = { module = "org.springframework.boot:spring-boot-testcontainers" }
spring-context-indexer = { module = "org.springframework:spring-context-indexer" }
spring-cloud-bom = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "spring-cloud" }
spring-cloud-starter-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway" }
spring-cloud-starter-loadbalancer = { module = "org.springframework.cloud:spring-cloud-starter-loadbalancer" }
spring-cloud-starter-netflix-eureka-client = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client" }
spring-cloud-starter-netflix-eureka-server = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server" }
spring-integration-ip = { module = "org.springframework.integration:spring-integration-ip" }
spring-integration-jms = { module = "org.springframework.integration:spring-integration-jms" }
spring-integration-test = { module = "org.springframework.integration:spring-integration-test" }
spring-reactor-bom = { module = "io.projectreactor:reactor-bom", version.ref = "spring-reactor" }

springmockk = { module = "com.ninja-squad:springmockk", version.ref = "springmockk" }
systemstubs = { module = "uk.org.webcompere:system-stubs-jupiter", version.ref = "systemstubs" }

testcontainers-jupiter = { module = "org.testcontainers:junit-jupiter" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql" }
testcontainers-r2dbc = { module = "org.testcontainers:r2dbc" }

[plugins]
asciidoctor-jvm-convert = { id = "org.asciidoctor.jvm.convert", version.ref = "asciidoctor" }
asciidoctor-jvm-pdf = { id = "org.asciidoctor.jvm.pdf", version.ref = "asciidoctor" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
jacoco = { id = "jacoco", version.ref = "jacoco" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor-plugin" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }
test-logger = { id = "com.adarshr.test-logger", version.ref = "testLogger" }
